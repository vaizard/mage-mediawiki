---

- name: Ensure mediwiki's rootdir exists
  file:
    path: "{{ mediawiki_root.split('/')[0:-1]|join('/') }}"
    state: directory
    mode: 0644

- name: Clone mediawiki from main repo
  git:
    repo: "{{ mediawiki_repo }}"
    dest: "{{ mediawiki_root }}"
    version: "{{ mediawiki_version }}"
    depth: 1
    force: yes
    update: yes

#- name: Composer install
#  command: "composer install --no-dev chdir={{ mediawiki_root }}"

#- name: Clean skins & extensions directory before cloning new stuff in"
#  shell: "{{ item }} chdir={{ mediawiki_root }}"
#  with_items:
#    - find skins/* -maxdepth 1 ! -name 'README' | xargs rm -rf
#    - find extensions/* -maxdepth 1 ! -name 'README' | xargs rm -rf

#- name: Clone skins from main repo
#  git:
#    repo: "{{ mediawiki_repo }}"
#    dest: "{{ mediawiki_root }}/skins/{{ item.name }}"
#    version: "{{ mediawiki_version }}"
#    depth: 1
#    force: yes
#    update: yes
#  with_items: "{{ mediawiki_core_skins }}"

#- name: Clone skins from 3rd-party reps
#  git:
#    repo: "{{ item.repo }}"
#    dest: "{{ mediawiki_root }}/skins/{{ item.name }}"
#    version: "{{ item.version }}"
#    depth: 1
#    force: yes
#    update: yes
#  with_items: "{{ mediawiki_3rdparty_skins }}"

#- name: clone extensions from main repo
#  git:
#    repo: "{{ mediawiki_exts_repobase }}/{{ item.name }}.git"
#    dest: "{{ mediawiki_root }}/extensions/{{ item.name }}"
#    version: "{{ mediawiki_version }}"
#    depth: 1
#    force: yes
#    update: yes
#  with_items: "{{ mediawiki_core_extensions }}"

#- name: Clone extensions from 3rd-party repository
#  git:
#    repo: "{{ item.repo }}"
#    dest: "{{ mediawiki_root }}/extensions/{{ item.name }}"
#    version: "{{ item.version }}"
#    force: yes
#    update: yes
#  with_items: "{{ mediawiki_3rdparty_extensions }}"

#- name: Initialize WYSIWYG (CKEditor) extension
#  shell: "{{ item }}
#            chdir={{ mediawiki_root }}/extensions"
#  with_items:
#    - rm -rf {{ mediawiki_root }}/extensions/WYSIWYG/WYSIWYG/ckeditor_source
#    - rm -rf {{ mediawiki_root }}/extensions/WYSIWYG/SemanticForms
#    - rm -rf {{ mediawiki_root }}/extensions/WYSIWYG/WikiEditor
#    - mv {{ mediawiki_root }}/extensions/WYSIWYG/WYSIWYG/* {{ mediawiki_root }}/extensions/WYSIWYG/
#    - rm -rf {{ mediawiki_root }}/extensions/WYSIWYG/WYSIWYG

#- name: Initialize extensions (git submodule update -- init)
#  command: "git submodule update --init
#            chdir={{ mediawiki_root }}/extensions/{{ item.name }}"
#  with_items: "{{ mediawiki_core_extensions }}"

#- name: initialize extensions (composer)
#  command: "composer install chdir={{ mediawiki_root }}/extensions/{{ item.name }}"
#  with_items: "{{ mediawiki_extension_dependency }}"

#- name: update required packages (composer)
#  command: "php {{ mediawiki_root }}/composer.phar require {{ item.name }}:{{ item.version }} {{ item.option|default('') }}
#            chdir={{ mediawiki_root }}"
#  with_items: "{{ mediawiki_extension_bycomposer }}"

#- name: create {{ install_role_name }} services directory
#  file:
#    path: "{{ mediawiki_root }}/services"
#    state: directory
#    mode: 0644

#- name: Clone Parsoid Services
#  git:
#    repo: "https://gerrit.wikimedia.org/r/p/mediawiki/services/{{ item.name }}.git"
#    dest: "{{ mediawiki_root }}/services/{{ item.name }}"
#    version: "{{ item.version }}"
#    depth: 1
#    force: yes
#    update: yes
#  with_items: "{{ mediawiki_core_services }}"

#- name: remove .git recursively from installation
#  shell:  "{{ item }}
#          chdir={{ mediawiki_root }}"
#  with_items:
#    - "find . ! -name services | grep .git | xargs rm -rf"

#- name: copy {{ install_role_name }} customization files
#  copy:
#    src: "{{ item.name }}"
#    dest: "{{ item.dest }}"
#    owner: root
#    group: root
#    mode: "{{ item.mode|default('0644') }}"
#    backup: yes
#  with_items: "{{ mediawiki_customization }}"

#- name: cleanup {{ install_role_name }} installation
#  shell:  "{{ item }}
#          chdir={{ mediawiki_root }}"
#  with_items:
#    - rm -f COPYING CREDITS FAQ HISTORY INSTALL README README.mediawiki UPGRADE
#    - rm -rf docs tests
#    - find {{ mediawiki_root }}/languages/i18n/ -type f -not \( -iname 'en*' -or -iname 'zh*' \) | xargs rm -f
#    - find . -print | while read filename; do touch -d '{{ mediawiki_startdate }}' "$filename"; done
#- tar -czvf ../mediawiki_REL1{{ mediawiki_version.split('_')[1] }}_setup_$(date '+%Y%m%d').tar.gz ../$(basename {{ mediawiki_root }})

#################
### CONFIGURE ###
#################

- name: initialize {{ install_role_name }} database
  command: >
    php {{ mediawiki_root }}/maintenance/install.php \
      --dbuser {{ mediawiki_db_user }} --dbpass {{ wiki_db_pass }} \
      --dbname {{ mediawiki_db_name }} --dbserver localhost --dbtype mysql --dbprefix wiki_ \
      --email {{ mediawiki_admin_email }} \
      --installdbuser {{ mediawiki_db_user }} --installdbpass {{ mediawiki_db_pass }} \
      --server {{ mediawiki_uri }} --pass {{ mediawiki_admin_pass }} \
      {{ mediawiki_admin_user }}
    chdir={{ mediawiki_root }}
    
- name: "Ensure {{ mediawiki_root }}/conf.d directory exists"
  file:
    path: "{{ mediawiki_root }}/conf.d"
    state: directory
    mode: 0755

- name: Ensure mediawiki is conigured
  template:
    src: "{{ item.name }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode|default('0644') }}"
    backup: yes
  with_items: "{{ mediawiki_configuration }}"

- name: Backup the empty database
  mysql_db:
    name: "{{ mediawiki_db_name }}"
    login_user: "{{ mediawiki_db_user }}"
    login_password: "{{ mediawiki_db_pass }}"
    state: dump
    target: "{{ mediawiki_root }}/conf.d/mediawiki_REL1_{{ mediawiki_version.split('_')[1] }}_emptydb.sql"

#- name: initialize {{ install_role_name }} Parsoid Services
#  shell:  "{{ item }}
#          chdir={{ mediawiki_root }}/services/parsoid"
#  with_items:
#    - npm install

