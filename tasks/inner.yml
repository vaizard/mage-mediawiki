---

- debug: var=mwr


# Inspired by https://github.com/yongxinL/ansible-mediawiki/blob/master/tasks/install.yml

- name: Ensure mediwiki rootdir exists
  file:
    path: "{{ outer_item.root.split('/')[0:-1]|join('/') }}"
    state: directory
    mode: 0755
  become_user: "{{ mediawiki_def_user }}"

- name: Unarchive MediaWiki
  unarchive:
    src: "https://github.com/wikimedia/mediawiki/archive/{{ outer_item.version | default(mediawiki_def_version) }}.tar.gz"
    dest: "{{ outer_item.root }}"
    owner: "{{ mediawiki_def_user }}"
    group: "{{ mediawiki_def_user }}"
    remote_src: yes
    extra_opts: "--strip-components=1"

- name: Use Composer to ensure all deps are installed
  command: "/usr/bin/composer install --no-dev chdir={{ outer_item.root }}"

- name: "Clean skins & extensions directory before cloning new stuff in"
  shell: "{{ item }} chdir={{ outer_item.root }}"
  with_items:
    - find skins/* -maxdepth 1 ! -name 'README' | xargs rm -rf
    - find extensions/* -maxdepth 1 ! -name 'README' | xargs rm -rf

- name: Ensure mediwiki skins dir is populated
  file:
    path: "{{ outer_item.root }}/skins/{{ item.name }}"
    state: directory
    mode: 0755
  become_user: "{{ mediawiki_def_user }}"
  with_items: "{{ mediawiki_skins }}"

- name: Ensure mediwiki extensions dir is populated
  file:
    path: "{{ outer_item.root }}/extensions/{{ item.name }}"
    state: directory
    mode: 0755
  become_user: "{{ mediawiki_def_user }}"
  with_items: "{{ mediawiki_exts }}"

- name: Ensure MediaWiki skins are in place
  unarchive:
    src: "{{ item.repo }}/archive/{{ item.version | default('master') }}.tar.gz"
    dest: "{{ outer_item.root }}/skins/{{ item.name }}"
    owner: "{{ mediawiki_def_user }}"
    group: "{{ mediawiki_def_user }}"
    remote_src: yes
    extra_opts: "--strip-components=1"
  with_items: "{{ mediawiki_skins }}"

- name: Ensure MediaWiki extensions are in place
  unarchive:
    src: "{{ item.repo }}/archive/{{ item.version | default('master') }}.tar.gz"
    dest: "{{ outer_item.root }}/extensions/{{ item.name }}"
    owner: "{{ mediawiki_def_user }}"
    group: "{{ mediawiki_def_user }}"
    remote_src: yes
    extra_opts: "--strip-components=1"
  with_items: "{{ mediawiki_exts }}"

- name: Initialize extensions (composer)
  shell: "/usr/bin/composer install chdir={{ outer_item.root }}/extensions/{{ item.name }}"
  with_items: "{{ mediawiki_exts }}"
  ignore_errors: yes

- name: Test if SwiftMailer extension is installed
  stat:
    path: "{{ outer_item.root }}/extensions/SwiftMailer"
  register: swift_installed

- name: Test if SwiftMailer extension needs patching
  stat:
    path: "{{ outer_item.root }}/extensions/SwiftMailer/extension.json"
  register: swift_needpatch
  when: swift_installed.stat.isdir == True

- name: Work around missing SwiftMailer extension extension.json
  copy: src=swiftmailer-extension.json dest="{{ outer_item.root }}/extensions/SwiftMailer/extension.json"
  when: swift_needpatch.stat.exists == False

- name: remove .git recursively from installation
  shell:  "{{ item }}
          chdir={{ outer_item.root }}"
  with_items:
    - "find . ! -name services | grep .git | xargs rm -rf"

- name: Ensure image directory is writable
  file:
    path: "{{ outer_item.root }}/images"
    mode: 0777
    state: directory

- name: "Ensure other files are in place"
  copy:
    src:  "{{ item.src }}"
    dest: "{{ outer_item.root }}/{{ item.dest }}"
  with_items: "{{ outer_item.files }}"
  when: outer_item.files is defined

#- name: copy {{ install_role_name }} customization files
#  copy:
#    src: "{{ item.name }}"
#    dest: "{{ item.dest }}"
#    owner: root
#    group: root
#    mode: "{{ item.mode|default('0644') }}"
#    backup: yes
#  with_items: "{{ mediawiki_customization }}"

#- name: cleanup {{ install_role_name }} installation
#  shell:  "{{ item }}
#          chdir={{ mediawiki_root }}"
#  with_items:
#    - rm -f COPYING CREDITS FAQ HISTORY INSTALL README README.mediawiki UPGRADE
#    - rm -rf docs tests
#    - find {{ mediawiki_root }}/languages/i18n/ -type f -not \( -iname 'en*' -or -iname 'zh*' \) | xargs rm -f
#    - find . -print | while read filename; do touch -d '{{ mediawiki_startdate }}' "$filename"; done
#- tar -czvf ../mediawiki_REL1{{ mediawiki_version.split('_')[1] }}_setup_$(date '+%Y%m%d').tar.gz ../$(basename {{ mediawiki_root }})

#################
### CONFIGURE ###
#################


- name: remove LocalSettings.php if it already exists
  file:
    path="{{ outer_item.root }}/LocalSettings.php"
    state=absent

- name: Generate fresh LocalSettings.php
  command: >
    php {{ outer_item.root }}/maintenance/install.php \
      --dbuser {{ outer_item.db_user }} --dbpass {{ outer_item.db_pass }} \
      --dbname {{ outer_item.db_name }} --dbserver localhost --dbtype {{ outer_item.db_type | default(mediawiki_def_db_type) }} --dbprefix {{ outer_item.db_prefix | default(mediawiki_def_db_prefix) }} \
      --installdbuser {{ outer_item.db_user }} --installdbpass {{ outer_item.db_pass }} \
      --server {{ outer_item.uri }} --pass {{ outer_item.admin_pass }} \
      --scriptpath {{ outer_item.scriptpath | default('/') }} \
      "{{ outer_item.wiki_name }}" "{{ outer_item.admin_user }}"
    chdir={{ outer_item.root }}
  become_user: "{{ mediawiki_def_user }}"

- stat:
    path: "{{ outer_item.root }}/images/logo.png"
  register: logo

- name: "Set logo"
  lineinfile:
    path: "{{ outer_item.root }}/LocalSettings.php"
    regexp: '\$wgLogo = '
    line: '$wgLogo = "$wgResourceBasePath/images/logo.png";'
  when: logo.stat.exists

- name: "Patch LocalSettings.php"
  blockinfile:
    path: "{{ outer_item.root }}/LocalSettings.php"
    block: |
      {{ item.conf }}
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.name }}"
  with_items: "{{ mediawiki_config }}"

- name: "SMTP configuration"
  blockinfile:
    path: "{{ outer_item.root }}/LocalSettings.php"
    block: |
      $wgSMTPAuthenticationMethod = "{{ outer_item.smtp_authmethod }}";
      $wgSMTP = array(
        'host'     => "{{ outer_item.smtp_host }}", // could also be an IP address. Where the SMTP server is located
        'IDHost'   => "{{ outer_item.smtp_id_host }}",        // Generally this will be the domain name of your website (aka mywiki.org)
        'port'     => "{{ outer_item.smtp_port }}",                     // Port to use when connecting to the SMTP server
        'auth'     => {{ outer_item.smtp_auth }},                    // Should we use SMTP authentication (true or false)
        'username' => "{{ outer_item.smtp_username }}", // Username to use for SMTP authentication (if being used)
        'password' => "{{ outer_item.smtp_password }}"       // Password to use for SMTP authentication (if being used)
      );
  when: outer_item.smtp_enabled

- name: "Enable extensions"
  blockinfile:
    path: "{{ outer_item.root }}/LocalSettings.php"
    block: |
      ## Enabled Extensions. Most extensions are enabled by including the base extension file here
      #  but check specific extension documentation for more details
      #  The following extensions were automatically enabled:
      {% if mediawiki_exts %}
      {% for item in mediawiki_exts %}
      wfLoadExtension( '{{ item.name }}' );
      {% endfor %}
      {% endif %}
    marker: "# ANSIBLE MANAGED EXTENSIONS"

- name: "Ensure {{ outer_item.root }}/backup directory exists"
  file:
    path: "{{ outer_item.root }}/backup"
    state: directory
    mode: 0755
  become_user: "{{ mediawiki_def_user }}"

- name: "Ensure can't be accessed"
  copy: src=htaccess-deny-all dest="{{ outer_item.root }}/backup/.htaccess"

- name: Backup empty database
  mysql_db:
    name: "{{ outer_item.db_name }}"
    login_user: "{{ outer_item.db_user }}"
    login_password: "{{ outer_item.db_pass }}"
    state: dump
    target: "{{ outer_item.root }}/backup/mediawiki_REL1_{{ mediawiki_def_version.split('_') if outer_item.version is not defined else outer_item.version.split('_') }}_emptydb.sql"

